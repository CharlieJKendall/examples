//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class TestClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getSingleReturnValue(): Promise<DtoClass | null> {
        let url_ = this.baseUrl + "/Test/SingleReturnValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleReturnValue(_response);
        });
    }

    protected processGetSingleReturnValue(response: Response): Promise<DtoClass | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DtoClass.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DtoClass | null>(null as any);
    }

    getGenericEnumerableReturnValue(): Promise<DtoClass[] | null> {
        let url_ = this.baseUrl + "/Test/GenericEnumerableReturnValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGenericEnumerableReturnValue(_response);
        });
    }

    protected processGetGenericEnumerableReturnValue(response: Response): Promise<DtoClass[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DtoClass.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DtoClass[] | null>(null as any);
    }

    getArrayReturnValue(): Promise<DtoClass[] | null> {
        let url_ = this.baseUrl + "/Test/ArrayReturnValue";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetArrayReturnValue(_response);
        });
    }

    protected processGetArrayReturnValue(response: Response): Promise<DtoClass[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DtoClass.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DtoClass[] | null>(null as any);
    }

    getSingleInputValue(param: DtoClass | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Test/SingleInputValue";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(param);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleInputValue(_response);
        });
    }

    protected processGetSingleInputValue(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getGenericEnumerableInputValue(param: DtoClass[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Test/GenericEnumerableInputValue";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(param);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGenericEnumerableInputValue(_response);
        });
    }

    protected processGetGenericEnumerableInputValue(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getArrayInputValue(param: DtoClass[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Test/ArrayInputValue";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(param);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetArrayInputValue(_response);
        });
    }

    protected processGetArrayInputValue(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class DtoClass implements IDtoClass {
    dtoClassNested?: DtoClassNested;

    constructor(data?: IDtoClass) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtoClassNested = _data["DtoClassNested"] ? DtoClassNested.fromJS(_data["DtoClassNested"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DtoClass {
        data = typeof data === 'object' ? data : {};
        let result = new DtoClass();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DtoClassNested"] = this.dtoClassNested ? this.dtoClassNested.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDtoClass {
    dtoClassNested?: DtoClassNested;
}

export class DtoClassNested implements IDtoClassNested {
    dtoClassNestedTwice?: DtoClassNestedTwice;

    constructor(data?: IDtoClassNested) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtoClassNestedTwice = _data["DtoClassNestedTwice"] ? DtoClassNestedTwice.fromJS(_data["DtoClassNestedTwice"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DtoClassNested {
        data = typeof data === 'object' ? data : {};
        let result = new DtoClassNested();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DtoClassNestedTwice"] = this.dtoClassNestedTwice ? this.dtoClassNestedTwice.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDtoClassNested {
    dtoClassNestedTwice?: DtoClassNestedTwice;
}

export class DtoClassNestedTwice implements IDtoClassNestedTwice {
    dtoEnum?: DtoEnum;
    dtoNullableEnum?: DtoEnum | undefined;
    dtoEnumWithoutDefault?: DtoEnumWithoutDefault;
    dtoNullableString?: string | undefined;

    constructor(data?: IDtoClassNestedTwice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtoEnum = _data["DtoEnum"];
            this.dtoNullableEnum = _data["DtoNullableEnum"];
            this.dtoEnumWithoutDefault = _data["DtoEnumWithoutDefault"];
            this.dtoNullableString = _data["DtoNullableString"];
        }
    }

    static fromJS(data: any): DtoClassNestedTwice {
        data = typeof data === 'object' ? data : {};
        let result = new DtoClassNestedTwice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DtoEnum"] = this.dtoEnum;
        data["DtoNullableEnum"] = this.dtoNullableEnum;
        data["DtoEnumWithoutDefault"] = this.dtoEnumWithoutDefault;
        data["DtoNullableString"] = this.dtoNullableString;
        return data;
    }
}

export interface IDtoClassNestedTwice {
    dtoEnum?: DtoEnum;
    dtoNullableEnum?: DtoEnum | undefined;
    dtoEnumWithoutDefault?: DtoEnumWithoutDefault;
    dtoNullableString?: string | undefined;
}

export enum DtoEnum {
    Zero = 0,
}

export enum DtoEnumWithoutDefault {
    One = 1,
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}